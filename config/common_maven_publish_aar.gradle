ext["signing.keyId"] = '' //签名的密钥后8位
ext["signing.password"] = ''  //签名设置的密码
ext["signing.secretKeyRingFile"] = '' //生成的secring.gpg文件目录

apply plugin: 'maven-publish'
apply plugin: 'signing'

def isLocalUrl(Properties props) {
    if (props['LOCAL_URL'] != null) {
        println("LOCAL_URL=${props['LOCAL_URL']}")
        return Boolean.parseBoolean(props['LOCAL_URL'])
    } else {
        return true
    }
}

def getLocalRepo(Properties props) {
    if (props['LOCAL_REPO'] != null) {
        println("LOCAL_REPO=${props['LOCAL_REPO']}")
        return props['LOCAL_REPO']
    } else {
        return "../repo"
    }
}

static def getGroupId(Properties props) {
    if(props['GROUP_ID'] == null){
        throw  new Throwable('需要在project的maven_public.properties 声明 GROUP_ID')
    }
    return props['GROUP_ID']
}

static def getArtifactId(Properties props) {
    if(props['ARTIFACT_ID'] == null){
        throw  new Throwable('需要在project的maven_public.properties 声明 ARTIFACT_ID')
    }
    return props['ARTIFACT_ID']
}

static def getReleaseVersion(Properties props) {
    if(props['RELEASE_VERSION'] == null){
        throw  new Throwable('需要在project的maven_public.properties 声明 RELEASE_VERSION')
    }
    return props['RELEASE_VERSION']
}

def getReleaseRepositoryUrl(Properties props) {
    if (hasProperty('RELEASE_REPOSITORY_URL')) {
        return RELEASE_REPOSITORY_URL
    } else if (props['RELEASE_REPOSITORY_URL'] != null) {
        return props['RELEASE_REPOSITORY_URL']
    } else {
        return "https://s01.oss.sonatype.org/content/repositories/releases/"
    }
}

static def getRepositoryUsername(Properties props) {
    if(props['NEXUS_USERNAME'] == null){
        throw  new Throwable('需要在root project的local.properties 声明 NEXUS_USERNAME=你的密码')
    }
    return props['NEXUS_USERNAME']
}

static def getRepositoryPassword(Properties props) {
    if(props['NEXUS_PASSWORD'] == null){
        throw  new Throwable('需要在root project的local.properties 声明 NEXUS_PASSWORD=你的密码')
    }
    return props['NEXUS_PASSWORD']
}

//将源码打包任务
task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        println "$name=$value"
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

def localProperties = new Properties()
def mavenPublicProperties = new Properties()
afterEvaluate {

    rootProject.file('local.properties').withInputStream { localProperties.load(it) }

    File mavenPublicPropertiesFile = file(getProjectDir().absolutePath + '/maven_publish.properties')
    if(!mavenPublicPropertiesFile.exists()){
        throw  new Throwable('需要在library根目录（build.gradle同级目录）下创建maven_publish.properties文件，配置GROUP_ID、ARTIFACT_ID、RELEASE_VERSION')
    }
    mavenPublicPropertiesFile.withInputStream { mavenPublicProperties.load(it) }

    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId = getGroupId(mavenPublicProperties)
                artifactId = getArtifactId(mavenPublicProperties)
                version = getReleaseVersion(mavenPublicProperties)
                artifact(androidSourcesJar)
                // Self-explanatory metadata for the most part
                pom {
                    //第 3 处
                    name = getArtifactId(mavenPublicProperties)
                    description = '隐私API监控' //项目描述
                    // If your project has a dedicated site, use its URL here
                    url = 'https://github.com/lanshifu/PrivacyMethodHooker' //项目github链接
                    licenses {
                        license {
                            //协议类型，一般默认Apache License2.0的话不用改：
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                    developers {
                        developer {
                            //第 4 处
                            id = 'lanshifu' //你的sonatype用户名
                            name = 'lanshifu' //你的sonatype用户名
                            email = '404985095@qq.com' //你的sonatype注册邮箱
                        }
                    }
                    // Version control info, if you're using GitHub, follow the format as seen here
                    scm {
                        //第 5 处
                        //修改成你的Git地址：
                        connection = 'scm:git@github.com:lanshifu/PrivacyMethodHooker.git'
                        developerConnection = 'scm:git@github.com:lanshifu/PrivacyMethodHooker.git'
                        //分支地址：
                        url = 'https://github.com/lanshifu/PrivacyMethodHooker/tree/master'
                    }

                }
            }
            debug(MavenPublication) {
                from components.debug
                groupId = getGroupId(mavenPublicProperties)
                artifactId = getArtifactId(mavenPublicProperties)
                version = getReleaseVersion(mavenPublicProperties)
                artifact(androidSourcesJar)
            }
        }

        repositories {
            maven {

                if(isLocalUrl(mavenPublicProperties)){
                    url = uri(getLocalRepo(mavenPublicProperties))
                } else {
                    ///上传到远程仓库
                    url = getReleaseRepositoryUrl(mavenPublicProperties)
                    allowInsecureProtocol true
                    credentials {
                        username getRepositoryUsername(localProperties)
                        password getRepositoryPassword(localProperties)
                    }
                }

            }
        }
    }
}
signing {
    sign publishing.publications
}